q()
n
foo(lambda = 2)
method
library(dnr)
i <- 1
i <- 1
csmodel
matout
dim(matout)
lagvec
foo(lambda = 1)
foo(lambda = 1)
foo(lambd = 1)
mSelect$lambda.min
mFit$beta
as.vector(mFit$beta)
?setNames
colnames(XYdata[, -1])
colnames(XYdata)
mFit
mFit$coefficients
class(mFit$coefficients)
class(mFit)
summary(mFitt)
summary(mFit)
 names(mFit)
tmp <- summary(mFit)
class(tmp)
names(tmp)
tmp$coefficients
tmp$coefficients$Estimate
tmp$coefficients[,1]
class(tmp$coefficients)
mSummery$coefficients[-1, 1]
dim(XYdata)
dim(mSummery$coefficients)
mSummery
mSummery$coefficients[-1 , 1]
na.action(na.pass(mSummery$coefficients[-1 , 1]))
na.action(na.pass(mSummery$coefficients[, 1]))
(na.pass(mSummery$coefficients[, 1])
)
na.pass(mSummery$coefficients[, 1])
length(na.pass(mSummery$coefficients[, 1]))
mSummery$coefficients[, 1]
mSummery$coefficients
mSummery
summary(mFit)
mSummery
mSummery$coefficients
mSummery
dim(mSummery$coefficients)
class(mSummery$coefficients)
tmp <- matrix(c(NA, NA, 1, 2), 2, 2)
tmp
tmp <- matrix(c(NA, 1, NA, 2), 2, 2)
tmp
dim(tmp)
as.matrix(mSummery$coefficients)
as.matrix(mSummery$coefficients, na.omit = F)
class(mSummery)
summary.prrint
summary.print
print.summery.glm
tmpList <- list(a = tmp)
tmpList
mSummery
mSummery[[1]]
mSummery[[2]]
names(mSummery)
mSummery[[12]]
mSummery[[13]]
tmp <- print(mSummery)
tmp
class(tmp)
tmp$coefficient
print
print.summery
print.summery.glm
mFit$coefficients
which.na(mFit$coefficients)
is.na(mFit$coefficients)
mSE
regIntercept <- FALSE
summary(mFit)
mSummery
mCoef
is.na(mCoef)
mSE
length(mSE)
dim(mSummery$coefficients)
mSummery$coefficients
summary(mFit)
mCoef
length(mSE)
mSummery$coefficients
tmp$coef
tmp$se
tmp$lambda
q()
n
library(knitrr)
library(knitr)
install.packages("knitr")
knitr::knit("../vignettes/dnr_vignette.Rnw")
q()
n
q()
library(dnr)
data(beach)
beach[[1]]
beach[[1]]$regular
get.vertex.attribute(beach[[1]], "regular")
out$VertexCoef
out$EdgeCoef
nvertexstats
for(i seq_along(beach)) get.vertex.attribute(beach[[i]], "regular")
for(i in seq_along(beach)) get.vertex.attribute(beach[[i]], "regular")
seq_along(beach)
i
for(i in seq_along(beach[1:20])) get.vertex.attribute(beach[[i]], "regular")
for(i in seq_along(beach[1:20])) print(get.vertex.attribute(beach[[i]], "regular"))
out$VertexCoef
source("utilities.R")
source('vertexStatsNew.R')
source('vertexStats.R')
dim(XYdata)
names(XYdata)
colnames(XYdata)
dim(y)
class(y)
dim(x.Nets)
    for(i in seq_len(maxLag)){
        for(j in seq_len(nvertexstats)){
            cnames[(i - 1)*nvertexstats + j] <- 
                paste0("Vstat",j,"Lag",i, sep = ".")
        }
    }
source("vertexStats.R")
vstatNames
colnames(XYdata)
colnames(XYdata)
source("paramVertex.R")
out$VertexCoef
past0("a", "b", sep = ".")
paste0("a", "b", sep = ".")
paste0("a", "b", collapse = ".")
paste0("a", "b")
paste("a", "b")
paste("a", "b", sep = ".")
source("paramVertex.R")
out$VertexCoef
git diff paramVertex
source("paramVertex.R")
out$VertexCoef
as.numeric(out$VertexCoef)
out$VertexCoef
View(out$VertexCoef)
simResult$VertexParameterMat
q()
